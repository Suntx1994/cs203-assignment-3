###CS 203 Lab Assignment 3 

Tianxiang Sun 862051319
Qiuchen Xie 862057591

###A README file about modifying gem5 code to inplement FIFO replacement policy

##Part 1
##Modifying those files

1.Modifying gem5/src/mem/cache/Cache.py

comment 
	tag = Param.BaseTags(LRU(), "Tag store (replacement policy)")
And add 
	tag = Param.BaseTags(FIFO(),"Tag store (replacement policy)") 

For the first part, we only need to use LRU replacement policy here, therefore, we should comment the line 
	tag = Param.BaseTags(LRU()," Tag store (replacement policy)")
however, for the second part, we need to implement different replacement policy  for different part of cache, therefore, we should uncomment it.

2.Modifying gem5/src/mem/cache/base.cc

Add 
	#include "mem/cache/tags/fifo.hh"

3.Modifying gem5/src/mem/cache/tags/Tags.py

Add

	class FIFO(BasesetAssoc):
		type ='FIFO'
		cxx_class = 'FIFO'
		cxx_header = "mem/cache/tags/fifo.hh"

4.Modifying gem5/src/mem/cache/tags/SConscript

Add 
	Source('fifo.cc')

5.Add a fifo.hh file in directory gem5/src/mem/cache/tags

Most part of this file is like file lru.hh, it is how we implement this file. We try to use lru.hh as a example to write this file. 

6.Add a FIFO.hh file in directory gem5/build/ALPHA/params

Most part of this file is likw file LRU.hh, it is how we implement this file. We try to use LRU.hh as a example also

7.Add fifo.cc file in directory gem5/src/mem/cache/tags

Most part of this file is like lru.cc, it is how we implement this file.The most important part we need to consider and change is 
	FIFO::accessBlock(Addr addr, bool is_secure, Cycles &lat)
Seeing details in code.

##Above part is how we implement FIFO replacement policy in gem5 


##Part 2
##Modifying those files


1.Add victim cache class in gem5/configs/common/Caches.py

We add the cache class here using other cache class as a example.
	class VictimCache(Cache):
				....
And we also use 
	tags = Param.BaseTag(FIFO(),"Tag store (replacement policy)")
and 
	tags = Param.BaseTag(LRU(),"Tag store (replacement policy")
to implement different replacement policy for different caches.

2.Define VictimXBar in src/mem/XBar.py

	class VictimXBar(CoherentXBar):
				....

3. Import VictimXBar in gem5/src/cpu/BaseCPU.py

	from XBar import VictimBar


4. Also define function in BaseCPU.py


5.Modifying gem5/configs/common/CacheConfig.py

Add victim_cache_class here
	dcache_class,icache_class,l2_cache_class,victim_cache_class,walk_cache_class = \
	L1_Dcache,L1_Icache, L2Cache, VictimCache, None

Connect victim cache with other part here
	if options.l2cache:
		if options.victimcache:
					....

Seeing details in code.


6.Add option in gem5/configs/common/Options.py 

	parser.add_option("--victimccdache",action="store_true")

And we still need to add options of victim size and assoc here

After adding all those options, then we can put the options in exact position as where we put in Options.py to run gem5.Because the victim cache would have 4,8,16 blocks. We use 64B as block size. The size of victim cache would be 256B,512B and 1024B. The assoc here we use 1.

##Finished here
##Implement victim cache here.


###Done
###Finished all parts
